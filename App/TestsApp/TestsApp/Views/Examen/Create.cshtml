@model TestsApp.Models.Examen

@{
    ViewBag.Title = "Create";
}

<div class="box-header">
    <i class="icon-th-list"></i>Crear Examen
          
</div>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(r => r.IdTipo);
    <div class="row-fluid">
        <div class="padded">
            <div class="row-fluid">
                <div class="span6">
                    <div class="input full-width">
                        @Html.ValidationMessageFor(model => model.Titulo)
                        <h1 id="TituloExamen">
                            <span>
                                <label id="lblTitulo" data-type="editable" data-for="#Titulo">@Model.Titulo</label>
                                @Html.TextBoxFor(model => model.Titulo, new { @id = "Titulo" })
                            </span>
                        </h1>
                    </div>
                    <div class="input full-width">
                        <h4>Creado el: @DateTime.Now.ToShortDateString()
                        </h4>
                    </div>
                    <div class="row-fluid">
                        <div class="span6">
                            <label class="control-label" for="txtFechaEjecucion">
                                Fecha de ejecución:
                            </label>
                            @Html.ValidationMessageFor(model => model.FechaEjecucion)
                            <div class="input-append date datepicker" data-date="@DateTime.Now" data-date-format="dd/mm/yyyy">
                                @Html.TextBoxFor(model => model.FechaEjecucion, "{0:dd/MM/yyyy}", new { @placeholder = "Elegir", @id = "txtFechaEjecucion" })
                                <button class="btn light-blue inverse date-button" type="button"><i class="icon-th"></i></button>
                            </div>
                        </div>
                        <div class="span6">
                            <label data-type="editable" data-for="#ddlLinea">Línea</label>
                            @Html.DropDownList("IdLinea", new SelectList(new TestsApp.Models.TestsAppBDEntities().Linea, "Id", "Nombre"), string.Empty, new Dictionary<string, object>
                                                       {
                                                           { "data-placeholder", "Seleccione" }, 
                                                           { "class", "chzn-select span3" },
                                                           { "id", "ddlLinea"}
                                                       })
                            <label data-type="editable" data-for="#ddlProducto">Producto</label>
                            @Html.ValidationMessageFor(model => model.IdProducto)
                            @Html.DropDownListFor(m => m.IdProducto, new SelectList(new TestsApp.Models.TestsAppBDEntities().Producto, "Id", "Nombre"), string.Empty, new Dictionary<string, object>
                                                       {
                                                           { "data-placeholder", "Seleccione" }, 
                                                           { "class", "chzn-select span3" },
                                                           { "id", "ddlProducto"}
                                                       })
                        </div>
                    </div>
                </div>
                <div class="span6">
                    <div id="PuntajeExamen" class="input full-width">
                        <h2>
                            <p style="font-weight: normal;">
                                Puntaje:
                                <span>
                                    <label data-type="editable" data-for="#Puntaje" style="display: inline;">@Model.PuntajeMaximo</label>
                                    @Html.TextBoxFor(model => model.PuntajeMaximo, new { @id = "Puntaje", @class = "inline-small" })
                                </span>
                            </p>
                        </h2>
                    </div>
                    <div id="TiempoExamen" class="input full-width">
                        <h3>
                            <p style="font-weight: normal;">
                                Tiempo Máximo (hh:mm):
                                <span>
                                    <label data-type="editable" data-for="#Tiempo" style="display: inline;">@Model.TiempoMaximo.Value.ToString(@"hh\:mm")</label>
                                    @Html.TextBoxFor(model => model.TiempoMaximo, new Dictionary<string, object> { { "id", "Tiempo" }, { "class", "masked-time" }, { "data-meiomask", "fixed.time" } })
                                </span>
                            </p>
                        </h3>
                    </div>

                </div>
            </div>
            <div class="section-title"></div>
            <div class="row-fluid">
                <div class="box-header">
                    <i class="icon-check"></i>Preguntas
                          <div class="pull-right">
                              <div class="btn-group">
                                  <a class="dropdown-toggle" data-toggle="dropdown">
                                      <i class="icon-cog"></i>
                                  </a>
                                  <ul class="dropdown-menu dropdown-left">
                                      <li><a href="#modal-pregunta" data-toggle="modal" onclick="agregarPregunta()">Agregar</a></li>
                                  </ul>
                              </div>
                          </div>
                </div>
                <div id="PreguntasContainer">
                    @Html.Partial("PreguntaPartial", Model == null ? new List<TestsApp.Models.Pregunta>() : Model.Pregunta)
                </div>

                <div id="modal-pregunta" class="modal hide fade" tabindex="-1" data-width="450" aria-hidden="true">
                    @Html.Partial("PreguntaPopUpPartial", new TestsApp.Models.Pregunta())
                </div>

                <div id="modal-prueba" class="modal hide fade" tabindex="-1" data-width="450" aria-hidden="true">
                </div>
            </div>
            <div class="row-fluid">
                <button type="button" class="btn btn-small">Cancelar</button>
                <input type="submit" value="Guardar" class="btn btn-small medium-blue" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar a la lista", "Index")
</div>

<script type="text/javascript">

    function GuardarPregunta_Click() {
        var anchor = "Examen";
        var textoPregunta = $('#txtPregunta').val();
        var puntajePregunta = $('#txtPuntaje').val();
        var tipoPregunta = $('#ddlTipoPregunta').val();
        var ordenPregunta = $('#hdnOrdenPregunta').val();
        var puntajeEx = $('#Puntaje').val()
        var preg = { "Id": "-1", "Texto": textoPregunta, "IdTipoPregunta": tipoPregunta, "IdExamen": "-1", "Puntaje": puntajePregunta, "Orden": ordenPregunta };
        var createPregunta = { pregunta: preg, puntajeExamen: puntajeEx };
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreatePregunta", "Examen")',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(createPregunta),
            success: function (data) {
                if (data.errorMsg == null) {
                    $("#PreguntasContainer").html(data);
                    $('#modal-pregunta').modal('hide');
                    $("#PreguntasContainer").find('input:checkbox').uniform();
                }
                else
                    $("#msgErrorPregunta").html(data.errorMsg);
                return false;
            },
            error: function (jqXhr, textStatus, errorThrown) {
                return false;
            }
        });
        return false;
    }

    function agregarPregunta() {
        $.ajax({
            type: 'GET',
            url: '@Url.Action("EditarPreguntaPrev", "Examen")',
            data: { id: -1 },
            success: function (data) {
                $("#modal-pregunta").html(data);
                $("#ddlTipoPregunta").chosen();
                return false;
            },
            error: function (jqXhr, textStatus, errorThrown) {
                return false;
            }
        });
    }

    function ChkRespuesta_Click(indexRespuesta, chk) {

        //var index = $('#hdnIndexPregunta').val();
        var index = indexRespuesta;
        var indexPregunta = $(chk).data('id');
        var ischecked = $(chk).is(':checked');
        $.ajax({
            type: 'POST',
            url: '@Url.Action("ChangeStateRespuesta", "Examen")',
            data: { indexRespuesta: indexRespuesta, indexPregunta: indexPregunta, ischecked: ischecked },
            success: function (data) {


                return false;
            },
            error: function (jqXhr, textStatus, errorThrown) {
                return false;
            }
        });
        return false;
    }

    function GuardarRespuesta_Click(indexPregunta) {

        //var index = $('#hdnIndexPregunta').val();
        var index = indexPregunta;
        var texto = $('#txtRespuesta' + index).val();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateRespuesta", "Examen")',
            data: { texto: texto, indexParent: index },
            success: function (data) {
                $("#RespuestasContainer" + index).html(data);
                $('#modal-respuesta').modal('hide');
                $("#RespuestasContainer" + index).find('input:checkbox').uniform();
                return false;
            },
            error: function (jqXhr, textStatus, errorThrown) {
                return false;
            }
        });
        return false;
    }

    $(function () {
        $("#ddlLinea").change(
        function () {
            loadProducts(this);
        });
        $("#ddlProducto").change(
        function () {
            setTitle(this);
        });
    });

    function setTitle(selectList) {
        var selectedText = $('#ddlProducto option:selected').text();
        if (selectedText != null && selectedText != '') {
            $("#lblTitulo").text(selectedText);
            $("#Titulo").text(selectedText);
        }

    }

    function loadProducts(selectList) {
        var selectedId = $(selectList).val();
        if (selectedId != null && selectedId != '') {
            $.getJSON('@Url.Action("GetProductsByLine")', { id: selectedId }, function (products) {
                var productsSelect = $('#ddlProducto');
                productsSelect.empty();
                $.each(products, function (index, product) {
                    productsSelect.append($('<option/>', {
                        value: product.value,
                        text: product.text
                    }));
                });
                $("#ddlProducto").trigger("liszt:updated");
                $("#ddlProducto").change();
            });
        }

    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/editable")
    @Scripts.Render("~/bundles/custom_editable")
}

